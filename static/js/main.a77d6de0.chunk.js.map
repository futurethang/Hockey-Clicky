{"version":3,"sources":["components/NavBar.js","components/Puck.js","components/PuckField.js","components/GameOverModal.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","props","react_default","a","createElement","Navbar","Header","Brand","href","Toggle","Collapse","Text","pullRight","score","topScore","Puck","alertProps","puck","id","toString","name","clicked","Col","xs","sm","md","src","image","onClick","console","log","puckId","PuckArea","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","clickShuffle","setState","pucks","shuffleArray","state","array","i","length","j","Math","floor","random","_ref","bind","assertThisInitialized","_this2","copiedArr","data","slice","shuffledPucks","Grid","fluid","Row","className","map","components_Puck","key","React","Component","GameOverModal","Modal","Dialog","Title","Body","Footer","Button","newGame","App","gameOver","incrementScore","e","newScore","checkPuckClickedStatus","puckClicked","update","defineProperty","$set","handleClick","uncheckedPucks","forEach","components_GameOverModal","components_NavBar","PuckField","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a77d6de0.chunk.js","sourcesContent":["import React from 'react'\nimport { Navbar } from 'react-bootstrap'\n\nconst NavBar = (props) => {\n  return (\n    <div>\n      <Navbar>\n        <Navbar.Header>\n          <Navbar.Brand>\n            <a href=\"#home\">Hockey Clicky</a>\n          </Navbar.Brand>\n          <Navbar.Toggle />\n        </Navbar.Header>\n        <Navbar.Collapse>\n          <Navbar.Text>\n            Click the pucks, just don't hit the same one twice!\n          </Navbar.Text>\n          <Navbar.Text pullRight>Score: {props.score} | Top Score: {props.topScore}</Navbar.Text>\n        </Navbar.Collapse>\n      </Navbar>\n    </div>\n\n  )\n}\n\nexport default NavBar;","import React from 'react'\nimport { Col } from 'react-bootstrap'\n\n\nfunction Puck(props) {\n  let alertProps = [\n    props.puck.id.toString(),\n    props.puck.name.toString(),\n    props.puck.clicked.toString()\n  ]\n\n\nreturn (\n  <div>\n    <Col xs={4} sm={3} md={3}>\n      {/* <h4>{props.puck.name}</h4> */}\n      <br></br>\n      <img src={props.puck.image} onClick={() => {\n        console.log(\"from the img click\", alertProps)\n        props.puckId(props.puck.id);\n        {/* props.shuffle() */}\n      }} />\n      {/* helper text for dev */}\n      {/* <span>{props.puck.id.toString()}</span> */}\n      {/* <span>{props.puck.name.toString()}</span> */}\n      {/* <span>{props.puck.clicked.toString()}</span> */}\n    </Col>\n\n  </div>\n)\n}\n\nexport default Puck;","import React from 'react'\n// import Grid from '@material-ui/core/Grid'\n// import TextField from '@material-ui/core/TextField'\n// import * as contentful from 'contentful'\nimport { Grid, Row } from 'react-bootstrap'\nimport Puck from '../components/Puck'\n\nclass PuckArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.clickShuffle = this.clickShuffle.bind(this);\n    this.shuffleArray = this.shuffleArray.bind(this);\n  }\n  // refactor so that the state is pure from the props, but is simply randomized before the view is rendered\n\n  clickShuffle = () => {\n    this.setState({\n      pucks: this.shuffleArray(this.state.pucks)\n    })\n  }\n\n  shuffleArray = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  }\n\n  render() {\n    let copiedArr = this.props.data.slice(0);\n    let shuffledPucks = this.shuffleArray(copiedArr);\n    return (\n      <div>\n        <div>\n          <Grid fluid=\"true\">\n            <Row className=\"show-grid text-center\">\n              {\n                // make a temp copy that is shuffled for mapping, and remove the shuffle click\n                \n                shuffledPucks.map((puck) => {\n                  return <Puck key={puck.id} puck={puck} puckId={this.props.puckId} />\n                })\n              }\n            </Row>\n          </Grid>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default PuckArea;\n","import React from 'react'\nimport { Modal, Button } from 'react-bootstrap'\n\nconst GameOverModal = (props) => {\n  return (\n    <div className=\"static-modal\">\n      <Modal.Dialog>\n        <Modal.Header>\n          <Modal.Title>GAME OVER</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n\n\n          Nice work you scored {props.score}\n          <br />\n\n          Try to beat your current top score of {props.topScore}\n\n\n\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button onClick={() => props.newGame()}>Try again!</Button>\n        </Modal.Footer>\n      </Modal.Dialog>\n    </div>\n  )\n}\n\nexport default GameOverModal;","import React, { Component } from 'react';\nimport update from 'react-addons-update'; // ES6\nimport './App.css';\nimport NavBar from './components/NavBar'\nimport PuckField from './components/PuckField'\nimport GameOverModal from './components/GameOverModal'\nimport pucks from './pucks.json'\n\n\nclass App extends Component {\n  state = {\n    data: pucks,\n    score: 0,\n    topScore: 0,\n    gameOver: false\n  }\n\n  incrementScore = (e) => {\n    let newScore = this.state.score + 1;\n    this.setState({ score: newScore })\n    console.log(this.state.score)\n  }\n\n  checkPuckClickedStatus = (id) => {\n    console.log(this.state.data[id]);\n    this.state.data[id].clicked === true ? this.gameOver() : this.incrementScore()\n  } \n\n  puckClicked = (id) => {\n    this.checkPuckClickedStatus(id);\n    // let thisPuck = this.state.data[id];\n    // thisPuck.clicked = true;\n    this.setState({\n      data: update(this.state.data, {[id]: {clicked: {$set: true}}})\n    })\n    // this.setState({\n    //   data: {\n    //     clicked: true\n    //   }\n    // })\n  }\n\n  handleClick = (i) => {\n    console.log(i, this.state.data[i])\n    this.puckClicked(i);\n  }\n\n  gameOver = () => {\n    let newScore = this.state.score > this.state.topScore ? this.state.score : this.state.topScore;\n    this.setState({\n      topScore: newScore,\n      gameOver: true\n    })\n  }\n\n  newGame = () => {\n    //need to clear the already clicked pucks\n    let uncheckedPucks = this.state.data;\n    uncheckedPucks.forEach((i) => {\n      i.clicked = false\n    })\n\n    this.setState({\n      score: 0,\n      gameOver: false,\n      data: uncheckedPucks\n    })\n  }\n\n  render() {\n    return (\n      this.state.gameOver === true ?\n        \n        <div>\n          <GameOverModal\n            newGame={this.newGame}\n            score={this.state.score}\n            topScore={this.state.topScore} />\n        </div>\n        \n        :\n        \n        <div>\n          <NavBar score={this.state.score} topScore={this.state.topScore} />\n          <PuckField data={this.state.data} puckId={this.handleClick} />\n        </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}